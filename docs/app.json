[{"name":"app.R","content":"library(shiny)\r\nlibrary(bslib)\r\n#data <- load(file = \"tcga_data.RData\")\r\nsource(\"functions.R\")\r\n\r\n# Define UI ----\r\nui <- page_sidebar(\r\n  title = \"SurvNet\",\r\n  sidebar = sidebar(\r\n    helpText(\"Plot TCGA patient survival based on gene expression\"),\r\n    \r\n    # First question: choose plot type\r\n    selectInput(\r\n      \"plot_type\",\r\n      label = \"What type of plot do you want?\",\r\n      choices = list(\"A Single Gene or Gene Module\", \r\n                     \"Two Gene Modules (High/High vs. Low/Low)\", \r\n                     \"Two Gene Modules (High/High vs. High/Low)\")\r\n    ),\r\n    \r\n    # --- UI for plot type 1 ---\r\n    conditionalPanel(\r\n      condition = \"input.plot_type == 'A Single Gene or Gene Module'\",\r\n      selectInput(\r\n        \"cancer\",\r\n        label = \"Choose a cancer type\",\r\n        choices = list(\r\n          \"TCGA-SKCM\", \"TCGA-COAD\", \"TCGA-LUAD\", \"TCGA-LUSC\", \"TCGA-OV\",\r\n          \"TCGA-BLCA\", \"TCGA-KIRC\", \"TCGA-KIRP\", \"TCGA-LIHC\", \"TCGA-PRAD\", \"TCGA-PAAD\", \"TCGA-THCA\", \r\n          \"TCGA-HNSC\", \"TCGA-SARC\", \"TCGA-STAD\", \"TCGA-ESCA\", \"TCGA-GBM\", \"TCGA-LGG\", \"TCGA-CESC\",\r\n          \"TCGA-PCPG\", \"TCGA-READ\", \"TCGA-TGCT\", \"TCGA-THYM\", \"TCGA-UCEC\"\r\n        )\r\n      ),\r\n      textInput(\"module\", label = \"Enter the name of the gene module (ex: T-Cell)\"),\r\n      textInput(\"list\", label = \"Enter the names of the genes in the module in all caps and separated by spaces\"),\r\n      actionButton(\"plotButton\", \"Plot\")\r\n    ),\r\n    \r\n    # --- UI for plot type 2 ---\r\n    conditionalPanel(\r\n      condition = \"input.plot_type == 'Two Gene Modules (High/High vs. Low/Low)'\",\r\n      selectInput(\r\n        \"cancer\",\r\n        label = \"Choose a cancer type\",\r\n        choices = list(\r\n          \"TCGA-SKCM\", \"TCGA-COAD\", \"TCGA-LUAD\", \"TCGA-LUSC\", \"TCGA-OV\",\r\n          \"TCGA-BLCA\", \"TCGA-KIRC\", \"TCGA-KIRP\", \"TCGA-LIHC\", \"TCGA-PRAD\", \"TCGA-PAAD\", \"TCGA-THCA\", \r\n          \"TCGA-HNSC\", \"TCGA-SARC\", \"TCGA-STAD\", \"TCGA-ESCA\", \"TCGA-GBM\", \"TCGA-LGG\", \"TCGA-CESC\",\r\n          \"TCGA-PCPG\", \"TCGA-READ\", \"TCGA-TGCT\", \"TCGA-THYM\", \"TCGA-UCEC\"\r\n        )\r\n      ),\r\n      textInput(\"module\", label = \"Enter the name of the first gene module (ex: T-Cell)\"),\r\n      textInput(\"list\", label = \"Enter the names of the genes in the first module in all caps and separated by spaces\"),\r\n      textInput(\"module2\", label = \"Enter the name of the second gene module (ex: cDC1)\"),\r\n      textInput(\"list2\", label = \"Enter the names of the genes in the second module in all caps and separated by spaces\"),\r\n      actionButton(\"plotButton\", \"Plot\")\r\n    ),\r\n    \r\n    # --- UI for plot type 3 (same as 2 for now) ---\r\n    conditionalPanel(\r\n      condition = \"input.plot_type == 'Two Gene Modules (High/High vs. High/Low)'\",\r\n      selectInput(\r\n        \"cancer\",\r\n        label = \"Choose a cancer type\",\r\n        choices = list(\r\n          \"TCGA-SKCM\", \"TCGA-COAD\", \"TCGA-LUAD\", \"TCGA-LUSC\", \"TCGA-OV\",\r\n          \"TCGA-BLCA\", \"TCGA-KIRC\", \"TCGA-KIRP\", \"TCGA-LIHC\", \"TCGA-PRAD\", \"TCGA-PAAD\", \"TCGA-THCA\", \r\n          \"TCGA-HNSC\", \"TCGA-SARC\", \"TCGA-STAD\", \"TCGA-ESCA\", \"TCGA-GBM\", \"TCGA-LGG\", \"TCGA-CESC\",\r\n          \"TCGA-PCPG\", \"TCGA-READ\", \"TCGA-TGCT\", \"TCGA-THYM\", \"TCGA-UCEC\"\r\n        )\r\n      ),\r\n      textInput(\"module\", label = \"Enter the name of the first gene module (ex: T-Cell)\"),\r\n      textInput(\"list\", label = \"Enter the names of the genes in the first module in all caps and separated by spaces\"),\r\n      textInput(\"module2\", label = \"Enter the name of the second gene module (ex: CCL5)\"),\r\n      textInput(\"list2\", label = \"Enter the names of the genes in the second module in all caps and separated by spaces\"),\r\n      actionButton(\"plotButton\", \"Plot\")\r\n    )\r\n  ),\r\n  \r\n  mainPanel(\r\n    plotOutput(\"plot\")\r\n  )\r\n)\r\n\r\n# Define server logic ----\r\nserver <- function(input, output) {\r\n\r\n  plotData <- eventReactive(input$plotButton, {\r\n    \r\n    url <- switch(input$cancer,\r\n                  \"TCGA-SKCM\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/skcm.RData\",\r\n                  \"TCGA-COAD\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/coad.RData\",\r\n                  \"TCGA-LUAD\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/luad.RData\",\r\n                  \"TCGA-LUSC\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/lusc.RData\",\r\n                  \"TCGA-OV\"   = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/ov.RData\",\r\n                  \"TCGA-BLCA\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/blca.RData\",\r\n                  \"TCGA-KIRC\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/kirc.RData\",\r\n                  \"TCGA-KIRP\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/kirp.RData\",\r\n                  \"TCGA-LIHC\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/lihc.RData\",\r\n                  \"TCGA-PRAD\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/prad.RData\",\r\n                  \"TCGA-PAAD\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/prad.RData\",\r\n                  \"TCGA-THCA\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/thca.RData\",\r\n                  \"TCGA-HNSC\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/hnsc.RData\",\r\n                  \"TCGA-SARC\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/sarc.RData\",\r\n                  \"TCGA-STAD\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/stad.RData\",\r\n                  \"TCGA-ESCA\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/esca.RData\",\r\n                  \"TCGA-GBM\"  = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/gbm.RData\",\r\n                  \"TCGA-LGG\"  = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/lgg.RData\",\r\n                  \"TCGA-CESC\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/cesc.RData\",\r\n                  \"TCGA-PCPG\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/pcpg.RData\",\r\n                  \"TCGA-READ\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/read.RData\",\r\n                  \"TCGA-TGCT\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/tgct.RData\",\r\n                  \"TCGA-THYM\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/thym.RData\",\r\n                  \"TCGA-UCEC\" = \"https://raw.githubusercontent.com/vkbharadwaj123/surv_plot/7971ce1fd2fbfa52b4988aad31b33df83edc6806/ucec.RData\"\r\n    )\r\n    \r\n    load(url(url))\r\n    \r\n    cancer_data_prime <- switch(input$cancer,\r\n                                \"TCGA-SKCM\" = SKCM_cancer_data_prime,\r\n                                \"TCGA-COAD\" = COAD_cancer_data_prime,\r\n                                \"TCGA-LUAD\" = LUAD_cancer_data_prime,\r\n                                \"TCGA-LUSC\" = LUSC_cancer_data_prime,\r\n                                \"TCGA-OV\"   = OV_cancer_data_prime,\r\n                                \"TCGA-BLCA\" = BLCA_cancer_data_prime,\r\n                                \"TCGA-KIRC\" = KIRC_cancer_data_prime,\r\n                                \"TCGA-KIRP\" = KIRP_cancer_data_prime,\r\n                                \"TCGA-LIHC\" = LIHC_cancer_data_prime,\r\n                                \"TCGA-PRAD\" = PRAD_cancer_data_prime,\r\n                                \"TCGA-PAAD\" = PAAD_cancer_data_prime,\r\n                                \"TCGA-THCA\" = THCA_cancer_data_prime,\r\n                                \"TCGA-HNSC\" = HNSC_cancer_data_prime,\r\n                                \"TCGA-SARC\" = SARC_cancer_data_prime,\r\n                                \"TCGA-STAD\" = STAD_cancer_data_prime,\r\n                                \"TCGA-ESCA\" = ESCA_cancer_data_prime,\r\n                                \"TCGA-GBM\"  = GBM_cancer_data_prime,\r\n                                \"TCGA-LGG\"  = LGG_cancer_data_prime,\r\n                                \"TCGA-CESC\" = CESC_cancer_data_prime,\r\n                                \"TCGA-PCPG\" = PCPG_cancer_data_prime,\r\n                                \"TCGA-READ\" = READ_cancer_data_prime,\r\n                                \"TCGA-TGCT\" = TGCT_cancer_data_prime,\r\n                                \"TCGA-THYM\" = THYM_cancer_data_prime,\r\n                                \"TCGA-UCEC\" = UCEC_cancer_data_prime\r\n    )\r\n    \r\n    clinical <- switch(input$cancer, \r\n                       \"TCGA-SKCM\" = SKCM_clinical_data,\r\n                       \"TCGA-COAD\" = COAD_clinical_data,\r\n                       \"TCGA-LUAD\" = LUAD_clinical_data,\r\n                       \"TCGA-LUSC\" = LUSC_clinical_data,\r\n                       \"TCGA-OV\"   = OV_clinical_data,\r\n                       \"TCGA-BLCA\" = BLCA_clinical_data,\r\n                       \"TCGA-KIRC\" = KIRC_clinical_data,\r\n                       \"TCGA-KIRP\" = KIRP_clinical_data,\r\n                       \"TCGA-LIHC\" = LIHC_clinical_data,\r\n                       \"TCGA-PRAD\" = PRAD_clinical_data,\r\n                       \"TCGA-PAAD\" = PAAD_clinical_data,\r\n                       \"TCGA-THCA\" = THCA_clinical_data,\r\n                       \"TCGA-HNSC\" = HNSC_clinical_data,\r\n                       \"TCGA-SARC\" = SARC_clinical_data,\r\n                       \"TCGA-STAD\" = STAD_clinical_data,\r\n                       \"TCGA-ESCA\" = ESCA_clinical_data,\r\n                       \"TCGA-GBM\"  = GBM_clinical_data,\r\n                       \"TCGA-LGG\"  = LGG_clinical_data,\r\n                       \"TCGA-CESC\" = CESC_clinical_data,\r\n                       \"TCGA-PCPG\" = PCPG_clinical_data,\r\n                       \"TCGA-READ\" = READ_clinical_data,\r\n                       \"TCGA-TGCT\" = TGCT_clinical_data,\r\n                       \"TCGA-THYM\" = THYM_clinical_data,\r\n                       \"TCGA-UCEC\" = UCEC_clinical_data\r\n    )\r\n    \r\n    gene_metadata <- switch(input$cancer, \r\n                            \"TCGA-SKCM\" = SKCM_gene_metadata,\r\n                            \"TCGA-COAD\" = COAD_gene_metadata,\r\n                            \"TCGA-LUAD\" = LUAD_gene_metadata,\r\n                            \"TCGA-LUSC\" = LUSC_gene_metadata,\r\n                            \"TCGA-OV\"   = OV_gene_metadata,\r\n                            \"TCGA-BLCA\" = BLCA_gene_metadata,\r\n                            \"TCGA-KIRC\" = KIRC_gene_metadata,\r\n                            \"TCGA-KIRP\" = KIRP_gene_metadata,\r\n                            \"TCGA-LIHC\" = LIHC_gene_metadata,\r\n                            \"TCGA-PRAD\" = PRAD_gene_metadata,\r\n                            \"TCGA-PAAD\" = PAAD_gene_metadata,\r\n                            \"TCGA-THCA\" = THCA_gene_metadata,\r\n                            \"TCGA-HNSC\" = HNSC_gene_metadata,\r\n                            \"TCGA-SARC\" = SARC_gene_metadata,\r\n                            \"TCGA-STAD\" = STAD_gene_metadata,\r\n                            \"TCGA-ESCA\" = ESCA_gene_metadata,\r\n                            \"TCGA-GBM\"  = GBM_gene_metadata,\r\n                            \"TCGA-LGG\"  = LGG_gene_metadata,\r\n                            \"TCGA-CESC\" = CESC_gene_metadata,\r\n                            \"TCGA-PCPG\" = PCPG_gene_metadata,\r\n                            \"TCGA-READ\" = READ_gene_metadata,\r\n                            \"TCGA-TGCT\" = TGCT_gene_metadata,\r\n                            \"TCGA-THYM\" = THYM_gene_metadata,\r\n                            \"TCGA-UCEC\" = UCEC_gene_metadata\r\n    )\r\n    \r\n    col_data <- switch(input$cancer, \r\n                       \"TCGA-SKCM\" = SKCM_col_data,\r\n                       \"TCGA-COAD\" = COAD_col_data,\r\n                       \"TCGA-LUAD\" = LUAD_col_data,\r\n                       \"TCGA-LUSC\" = LUSC_col_data,\r\n                       \"TCGA-OV\"   = OV_col_data,\r\n                       \"TCGA-BLCA\" = BLCA_col_data,\r\n                       \"TCGA-KIRC\" = KIRC_col_data,\r\n                       \"TCGA-KIRP\" = KIRP_col_data,\r\n                       \"TCGA-LIHC\" = LIHC_col_data,\r\n                       \"TCGA-PRAD\" = PRAD_col_data,\r\n                       \"TCGA-PAAD\" = PAAD_col_data,\r\n                       \"TCGA-THCA\" = THCA_col_data,\r\n                       \"TCGA-HNSC\" = HNSC_col_data,\r\n                       \"TCGA-SARC\" = SARC_col_data,\r\n                       \"TCGA-STAD\" = STAD_col_data,\r\n                       \"TCGA-ESCA\" = ESCA_col_data,\r\n                       \"TCGA-GBM\"  = GBM_col_data,\r\n                       \"TCGA-LGG\"  = LGG_col_data,\r\n                       \"TCGA-CESC\" = CESC_col_data,\r\n                       \"TCGA-PCPG\" = PCPG_col_data,\r\n                       \"TCGA-READ\" = READ_col_data,\r\n                       \"TCGA-TGCT\" = TGCT_col_data,\r\n                       \"TCGA-THYM\" = THYM_col_data,\r\n                       \"TCGA-UCEC\" = UCEC_col_data\r\n    )\r\n    \r\n    gene_list <- toupper(strsplit(input$list, \"\\\\s+\")[[1]])\r\n    \r\n    if (input$plot_type == \"A Single Gene or Gene Module\") {\r\n      plotSingleLineage(\r\n        cancer = input$cancer, \r\n        gene_module = input$module, \r\n        gene_list = gene_list, \r\n        makeHeatMap = FALSE,\r\n        cancer_data_prime, clinical, gene_metadata, col_data\r\n      )\r\n    } else if (input$plot_type == \"Two Gene Modules (High/High vs. Low/Low)\") {\r\n      gene_list2 <- toupper(strsplit(input$list2, \"\\\\s+\")[[1]])\r\n      HighHighLowLowThird(\r\n        cancer = input$cancer,\r\n        gene_module1 = input$module,\r\n        gene_list1 = gene_list,\r\n        gene_module2 = input$module2,\r\n        gene_list2 = gene_list2,\r\n        cancer_data_prime, clinical, gene_metadata, col_data\r\n      )\r\n    } else if (input$plot_type == \"Two Gene Modules (High/High vs. High/Low)\") {\r\n      gene_list2 <- toupper(strsplit(input$list2, \"\\\\s+\")[[1]])\r\n      plotLineageLigand(\r\n        cancer = input$cancer,\r\n        gene_module1 = input$module,\r\n        gene_list1 = gene_list,\r\n        gene_module2 = input$module2,\r\n        gene_list2 = gene_list2,\r\n        cancer_data_prime, clinical, gene_metadata, col_data\r\n      )\r\n    }\r\n  })\r\n  \r\n  output$plot <- renderPlot({\r\n    plotData()\r\n  })\r\n}\r\n\r\n# Run the app ----\r\nshinyApp(ui = ui, server = server)\r\n\r\n","type":"text"},{"name":"functions.R","content":"library(dplyr)\r\nlibrary(tibble)\r\nlibrary(ggplot2)\r\nlibrary(ggrepel)\r\nlibrary(survival)\r\n\r\nplotSingleLineage <- function (cancer, gene_module, gene_list, makeHeatMap,\r\n                               cancer_data_prime, clinical_data, gene_metadata, col_data) {\r\n  \r\n  \r\n  desired_geneIDs <- gene_metadata[gene_metadata$gene_name %in% gene_list, ]\r\n  \r\n  cancer_data <- merge(cancer_data_prime, desired_geneIDs, by = 'row.names')\r\n\r\n  \r\n  # replacing the ID column with names & keeping only needed columns\r\n  cancer_data <- cancer_data %>% relocate(gene_name)\r\n  columns <- c('Row.names', 'gene_id', 'gene_type',\r\n               'havana_gene', 'phase', 'level', 'source', 'hgnc_id', 'score', 'type')\r\n  \r\n  # this is the final count data\r\n  cancer_data <- cancer_data[, !(names(cancer_data) %in% columns)]\r\n  \r\n  unordered_expression_data <- cancer_data\r\n  \r\n  # ---------- ordering the patients based on expression\r\n  unordered_expression_data_1 <- unordered_expression_data\r\n  \r\n  rownames(unordered_expression_data_1) <- unordered_expression_data$gene_name\r\n  \r\n  unordered_expression_data_1 <- as.data.frame(unordered_expression_data_1)\r\n  \r\n  unordered_expression_data_1[] <- lapply(unordered_expression_data_1, as.numeric)\r\n  \r\n  unordered_expression_data_1 <- as.matrix(unordered_expression_data_1)\r\n  \r\n  unordered_expression_data_1 <- unordered_expression_data_1[, -1, drop = FALSE]\r\n  \r\n  num_genes <- nrow(unordered_expression_data_1)\r\n  num_patients <- ncol(unordered_expression_data_1)\r\n  \r\n  for (gene in 1:num_genes) {\r\n    column_order <- order(unordered_expression_data_1[gene, ], decreasing = TRUE)\r\n    \r\n    # Reorder the columns based on the order obtained\r\n    unordered_expression_data_1 <- unordered_expression_data_1[, column_order]\r\n    \r\n    # adding the ranks for each gene\r\n    unordered_expression_data_1 <- rbind(unordered_expression_data_1, 1:num_patients)\r\n    \r\n  }\r\n  \r\n  # adding the mean rank across all rows\r\n  \r\n  unordered_expression_data_1 <- as.data.frame(unordered_expression_data_1)\r\n  \r\n  unordered_expression_data_1[] <- lapply(unordered_expression_data_1, as.numeric)\r\n  \r\n  mean_rank <- colMeans(unordered_expression_data_1[(num_genes+1):(num_genes*2), ])\r\n  \r\n  unordered_expression_data_1 <- rbind(unordered_expression_data_1, mean_rank)\r\n  \r\n  unordered_expression_data_1 <- as.matrix(unordered_expression_data_1)\r\n  \r\n  mean_rank_order <- order(unordered_expression_data_1[(num_genes*2+1), ],\r\n                           decreasing = FALSE)\r\n  \r\n  # Reorder the columns based on the order obtained\r\n  unordered_expression_data_1 <- unordered_expression_data_1[, mean_rank_order]\r\n  \r\n  final_ordered_expressions_and_ranks <- as.data.frame(unordered_expression_data_1)\r\n  \r\n  # -------------- subsetting for just the expression data \r\n  ordered_expression_data <- final_ordered_expressions_and_ranks[1:num_genes, ]\r\n  \r\n  upper <- ordered_expression_data[ , 1:ceiling(num_patients * 0.25)]\r\n  lower <- ordered_expression_data[, (num_patients - floor(num_patients * 0.25)):num_patients]\r\n  \r\n  # making patients the rows and adding HIGH/LOW expression\r\n  upper <- as.data.frame(t(upper))\r\n  upper$patients <- rownames(upper)\r\n  upper$stratum <- \"HIGH\"\r\n  upper <- upper[, -c(1:num_genes)]\r\n\r\n  lower <- as.data.frame(t(lower))\r\n  lower$patients <- rownames(lower)\r\n  lower$stratum <- \"LOW\"\r\n  lower <- lower[, -c(1:num_genes)]\r\n\r\n  \r\n  combined_patients <- rbind(lower, upper)\r\n\r\n  \r\n  # -------------- generating heatmap \r\n  heatmap_grob <- NULL\r\n  # if (makeHeatMap == TRUE) {\r\n  #   heatmap_values <- ordered_expression_data\r\n  #   row.names(heatmap_values) <- gene_list\r\n  #   ngenes = 10\r\n  #   brewer_palette <- \"RdBu\"\r\n  #   ramp <- colorRampPalette(RColorBrewer::brewer.pal(11, brewer_palette))\r\n  #   mr <- ramp(256)[256:1]\r\n  #   \r\n  #   # capture the pheatmap as a grid object\r\n  #   heatmap_obj <- pheatmap::pheatmap(\r\n  #     heatmap_values,\r\n  #     labCol = NA, color = mr, scale = \"row\",\r\n  #     fontsize_col = 10, fontsize_row = 200/ngenes, fontsize = 15,\r\n  #     border_color = NA, show_colnames = FALSE,\r\n  #     cluster_rows = FALSE, cluster_cols = FALSE, main = gene_module,\r\n  #     silent = TRUE\r\n  #   )\r\n  #   \r\n  #   heatmap_grob <- heatmap_obj$gtable\r\n  #   \r\n  # }\r\n  \r\n  # -------------- preparing subsets for survival plots \r\n\r\n  \r\n  # adding the clinical data \r\n  \r\n  # matching the formatting of the patient IDs in both datafames \r\n  combined_patients$patients <- gsub(\"\\\\.\", \"-\", combined_patients$patients)\r\n  \r\n  combined_patients <- merge(combined_patients, clinical_data,\r\n                             by.x = 'patients', by.y = 'cases')\r\n  \r\n  # adding a column for whether the patient is dead or not \r\n  combined_patients$deceased <- ifelse(combined_patients$vital_status == \"Alive\", FALSE, TRUE)\r\n  \r\n  # adding column that has days_to_death or days_to_last_follow_up \r\n  combined_patients$overall_survival <- ifelse(combined_patients$deceased == TRUE,\r\n                                               combined_patients$days_to_death,\r\n                                               combined_patients$days_to_last_follow_up)\r\n  \r\n  \r\n  # exporting the final data to be used for plot \r\n  final_plot_data <- as.data.frame(combined_patients)\r\n  \r\n  #return(final_plot_data)\r\n  fit <- survfit(Surv(overall_survival, deceased) ~ stratum, data = final_plot_data)\r\n  \r\n  # Compute log-rank p-value\r\n  surv_diff <- survdiff(Surv(overall_survival, deceased) ~ stratum, data = final_plot_data)\r\n  pval <- 1 - pchisq(surv_diff$chisq, length(surv_diff$n) - 1)\r\n  \r\n  # Restricted mean survival\r\n  # rmean_high <- summary(fit, rmean = \"common\")$table[1, \"rmean\"]\r\n  # rmean_low  <- summary(fit, rmean = \"common\")$table[2, \"rmean\"]\r\n  # survival_dif <- as.numeric(rmean_high - rmean_low)\r\n  \r\n  # Convert survfit to tidy data frame\r\n  strata_vec <- rep(names(fit$strata), fit$strata)\r\n  surv_df <- data.frame(\r\n    time = fit$time,\r\n    surv = fit$surv,\r\n    strata = strata_vec\r\n  )\r\n  \r\n  # Plot with ggplot2\r\n  title <- paste(gene_module, cancer, sep = \" in \")\r\n  \r\n  surv_plot <- ggplot(surv_df, aes(x = time, y = surv, color = strata)) +\r\n    geom_step(size = 1) +\r\n    theme_minimal() +\r\n    scale_color_manual(values = c(\"red\", \"blue\")) +\r\n    labs(\r\n      title = title,\r\n      x = \"Time (Days)\",\r\n      y = \"Survival Probability\",\r\n      color = \"Group\"\r\n    ) +\r\n    annotate(\"text\", x = 0, y = 0.02, label = paste(\"n =\", nrow(final_plot_data)), hjust = 0, vjust = 0, size = 4) +\r\n    annotate(\"text\", x = 0, y = 0.1, label = paste(\"p =\", round(pval,4)), hjust = 0, vjust = 0, size = 4)\r\n  \r\n  return(surv_plot)\r\n  \r\n}\r\n\r\n# plotSingleLineage(cancer = \"LIHC\", gene_module = \"CCL5\",\r\n#                   gene_list = c(\"CCL5\")\r\n#                   ,\r\n#                   makeHeatMap = FALSE,\r\n#                   cancer_data_prime = LIHC_cancer_data_prime, clinical_data = LIHC_clinical_data,\r\n#                   gene_metadata = LIHC_gene_metadata, col_data = LIHC_col_data)\r\n\r\n\r\n\r\nHighHighLowLowThird <- function(cancer, gene_module1, gene_module2, gene_list1, gene_list2, \r\n                                cancer_data_prime, clinical_data, gene_metadata, col_data) {\r\n  \r\n  \r\n  # flag variable to check if there are too little patients \r\n  too_little_patients <- FALSE\r\n  \r\n  # flag variable to check if there is too big a difference between the # of patients \r\n  big_dif <- FALSE\r\n  \r\n  \r\n  # first getting the upper and lower stratums of patients based on cell 1\r\n  cell1_patients <- stratifyPatients(gene_list = gene_list1, cancer_data_prime = cancer_data_prime,\r\n                                     clinical_data = clinical_data, gene_metadata = gene_metadata,\r\n                                     col_data = col_data)\r\n  \r\n  cell1_upper <- cell1_patients[cell1_patients$stratum == \"HIGH\", ]\r\n  cell1_lower <- cell1_patients[cell1_patients$stratum == \"LOW\", ]\r\n  \r\n  # now doing the same for cell 2\r\n  cell2_patients <- stratifyPatients(gene_list = gene_list2, cancer_data_prime = cancer_data_prime,\r\n                                     clinical_data = clinical_data, gene_metadata = gene_metadata,\r\n                                     col_data = col_data)\r\n  \r\n  cell2_upper <- cell2_patients[cell2_patients$stratum == \"HIGH\", ]\r\n  cell2_lower <- cell2_patients[cell2_patients$stratum == \"LOW\", ]\r\n  \r\n  # now getting the high/high group based on duplicate patients\r\n  high_high <- cell1_upper[cell1_upper$patients %in% intersect(cell1_upper$patients, cell2_upper$patients), ]\r\n  \r\n  # doing the same for low/low\r\n  low_low <- cell1_lower[cell1_lower$patients %in% intersect(cell1_lower$patients, cell2_lower$patients), ]\r\n  \r\n  \r\n  # checking for enough patients and similar # of patients \r\n  if (nrow(high_high) < 15 || nrow(low_low) < 15) {\r\n    too_little_patients <- TRUE\r\n  }\r\n  # \r\n  # if ( abs( nrow(high_high) - nrow(low_low) ) > 0.20*(nrow(high_high)) ) {\r\n  #   big_dif <- TRUE\r\n  # }\r\n  \r\n  \r\n  # if either condition fails return a value that means they are not correlated\r\n  if (too_little_patients || big_dif) {\r\n    return_val <- c(1, 0)\r\n    return (return_val)\r\n  }\r\n  \r\n  \r\n  # from here on assume the conditions for correlation hold\r\n  \r\n  # now combining the patients and moving forward with survival analysis\r\n  final_plot_data <- as.data.frame(rbind(high_high, low_low))\r\n  \r\n  #return(final_plot_data)\r\n  \r\n  fit <- survfit(Surv(overall_survival, deceased) ~ stratum, data = final_plot_data)\r\n\r\n  surv_diff <- survdiff(Surv(overall_survival, deceased) ~ stratum, data = final_plot_data)\r\n  pval <- 1 - pchisq(surv_diff$chisq, length(surv_diff$n) - 1)\r\n  \r\n  # Restricted mean survival (optional)\r\n  # rmean_vals <- summary(fit, rmean = \"common\")$table\r\n  # mean_dif <- as.numeric(rmean_vals[1, \"rmean\"] - rmean_vals[2, \"rmean\"])\r\n  \r\n  strata_vec <- rep(names(fit$strata), fit$strata)\r\n  surv_df <- data.frame(\r\n    time = fit$time,\r\n    surv = fit$surv,\r\n    strata = strata_vec\r\n  )\r\n  \r\n  title <- paste(gene_module1, gene_module2, sep = \" & \")\r\n  title <- paste0(title, \": High/High vs Low/Low\")\r\n  title <- paste(title, cancer, sep = \" in \")\r\n\r\n  surv_plot <- ggplot(surv_df, aes(x = time, y = surv, color = strata)) +\r\n    geom_step(size = 1) +\r\n    theme_minimal() +\r\n    scale_color_manual(values = c(\"red\", \"blue\")) +\r\n    labs(\r\n      title = title,\r\n      x = \"Time (Days)\",\r\n      y = \"Survival Probability\",\r\n      color = \"Group\"\r\n    ) +\r\n    annotate(\"text\", x = 0, y = 0.02, label = paste(\"n =\", nrow(high_high)), hjust = 0, vjust = 0, size = 4) +\r\n    annotate(\"text\", x = 0, y = 0.1, label = paste(\"p =\", round(pval,4)), hjust = 0, vjust = 0, size = 4)\r\n  \r\n  return(surv_plot)\r\n  \r\n}\r\n\r\n# HighHighLowLowThird(cancer = \"TCGA-LIHC\", gene_module1 = \"malig hep\",\r\n#                     gene_list1 =  c(\"CCL5\")\r\n#                     ,\r\n#                     gene_module2 = \"malig epi\",\r\n#                     gene_list2 = c(\"CD40\")\r\n#                     ,\r\n#                     cancer_data_prime = LIHC_cancer_data_prime, clinical_data = LIHC_clinical_data,\r\n#                     gene_metadata = LIHC_gene_metadata, col_data = LIHC_col_data)\r\n\r\n\r\n# helper function\r\nstratifyPatients <- function(gene_list, cancer_data_prime, clinical_data, gene_metadata, col_data) {\r\n  \r\n  desired_geneIDs <- gene_metadata[gene_metadata$gene_name %in% gene_list, ]\r\n  \r\n  cancer_data <- merge(cancer_data_prime, desired_geneIDs, by = 'row.names')\r\n  \r\n  \r\n  # replacing the ID column with names & keeping only needed columns\r\n  cancer_data <- cancer_data %>% relocate(gene_name)\r\n  columns <- c('Row.names', 'gene_id', 'gene_type',\r\n               'havana_gene', 'phase', 'level', 'source', 'hgnc_id', 'score', 'type')\r\n  \r\n  # this is the final count data\r\n  cancer_data <- cancer_data[, !(names(cancer_data) %in% columns)]\r\n  \r\n  unordered_expression_data <- cancer_data\r\n  \r\n  # ---------- ordering the patients based on expression\r\n  unordered_expression_data_1 <- unordered_expression_data\r\n  \r\n  rownames(unordered_expression_data_1) <- unordered_expression_data$gene_name\r\n  \r\n  unordered_expression_data_1 <- as.data.frame(unordered_expression_data_1)\r\n  \r\n  unordered_expression_data_1[] <- lapply(unordered_expression_data_1, as.numeric)\r\n  \r\n  unordered_expression_data_1 <- as.matrix(unordered_expression_data_1)\r\n  \r\n  unordered_expression_data_1 <- unordered_expression_data_1[, -1, drop = FALSE]\r\n  \r\n  num_genes <- nrow(unordered_expression_data_1)\r\n  num_patients <- ncol(unordered_expression_data_1)\r\n  \r\n  for (gene in 1:num_genes) {\r\n    column_order <- order(unordered_expression_data_1[gene, ], decreasing = TRUE)\r\n    \r\n    # Reorder the columns based on the order obtained\r\n    unordered_expression_data_1 <- unordered_expression_data_1[, column_order]\r\n    \r\n    # adding the ranks for each gene\r\n    unordered_expression_data_1 <- rbind(unordered_expression_data_1, 1:num_patients)\r\n    \r\n  }\r\n  \r\n  # adding the mean rank across all rows\r\n  \r\n  unordered_expression_data_1 <- as.data.frame(unordered_expression_data_1)\r\n  \r\n  unordered_expression_data_1[] <- lapply(unordered_expression_data_1, as.numeric)\r\n  \r\n  mean_rank <- colMeans(unordered_expression_data_1[(num_genes+1):(num_genes*2), ])\r\n  \r\n  unordered_expression_data_1 <- rbind(unordered_expression_data_1, mean_rank)\r\n  \r\n  unordered_expression_data_1 <- as.matrix(unordered_expression_data_1)\r\n  \r\n  mean_rank_order <- order(unordered_expression_data_1[(num_genes*2+1), ],\r\n                           decreasing = FALSE)\r\n  \r\n  # Reorder the columns based on the order obtained\r\n  unordered_expression_data_1 <- unordered_expression_data_1[, mean_rank_order]\r\n  \r\n  final_ordered_expressions_and_ranks <- as.data.frame(unordered_expression_data_1)\r\n  \r\n  # -------------- subsetting for just the expression data \r\n  ordered_expression_data <- final_ordered_expressions_and_ranks[1:num_genes, ]\r\n  \r\n  upper <- ordered_expression_data[ , 1:ceiling(num_patients * 0.25)]\r\n  lower <- ordered_expression_data[, (num_patients - floor(num_patients * 0.25)):num_patients]\r\n  \r\n  # making patients the rows and adding HIGH/LOW expression\r\n  upper <- as.data.frame(t(upper))\r\n  upper$patients <- rownames(upper)\r\n  upper$stratum <- \"HIGH\"\r\n  upper <- upper[, -c(1:num_genes)]\r\n  \r\n  lower <- as.data.frame(t(lower))\r\n  lower$patients <- rownames(lower)\r\n  lower$stratum <- \"LOW\"\r\n  lower <- lower[, -c(1:num_genes)]\r\n  \r\n  \r\n  combined_patients <- rbind(lower, upper)\r\n  \r\n  # ----- adding the clinical data \r\n  \r\n  # matching the formatting of the patient IDs in both datafames \r\n  combined_patients$patients <- gsub(\"\\\\.\", \"-\", combined_patients$patients)\r\n  \r\n  combined_patients <- merge(combined_patients, clinical_data,\r\n                             by.x = 'patients', by.y = 'cases')\r\n  \r\n  # adding a column for whether the patient is dead or not \r\n  combined_patients$deceased <- ifelse(combined_patients$vital_status == \"Alive\", FALSE, TRUE)\r\n  \r\n  # adding column that has days_to_death or days_to_last_follow_up \r\n  combined_patients$overall_survival <- ifelse(combined_patients$deceased == TRUE,\r\n                                               combined_patients$days_to_death,\r\n                                               combined_patients$days_to_last_follow_up)\r\n  \r\n  # exporting the final data to be used for plot \r\n  final_plot_data <- as.data.frame(combined_patients)\r\n  \r\n  return (final_plot_data)\r\n  \r\n}\r\n\r\n\r\nplotLineageLigand <- function(cancer, gene_module1, gene_module2, gene_list1, gene_list2,\r\n                              cancer_data_prime, clinical_data, gene_metadata, col_data) {\r\n  \r\n  # keeping the genes that are in the gene name column (to avoid manually having\r\n  # to rename certain genes)\r\n  \r\n  gene_list1 <- intersect(gene_list1, gene_metadata$gene_name)\r\n  \r\n  # filtering for the desired genes\r\n  desired_geneIDs <- gene_metadata[gene_metadata$gene_name %in% gene_list1, ]\r\n  \r\n  cancer_data <- merge(cancer_data_prime, desired_geneIDs, by = 'row.names')\r\n  \r\n  # replacing the ID column with names & keeping only needed columns\r\n  cancer_data <- cancer_data %>% relocate(gene_name)\r\n  columns <- c('Row.names', 'gene_id', 'gene_type',\r\n               'havana_gene', 'phase', 'level', 'source', 'hgnc_id', 'score', 'type')\r\n  \r\n  # this is the final count data\r\n  cancer_data <- cancer_data[, !(names(cancer_data) %in% columns)]\r\n  \r\n  unordered_expression_data_1 <- cancer_data[, !(names(cancer_data) %in% columns)]\r\n  \r\n  # ---------- ordering the patients based on expression \r\n  \r\n  unordered_expression_data_1 <- unordered_expression_data_1 %>%\r\n    distinct(gene_name, .keep_all = TRUE)\r\n  \r\n  # Reset row names after removing duplicates\r\n  rownames(unordered_expression_data_1) <- NULL\r\n  \r\n  \r\n  # Set row names and drop 'gene_name' column in one step before conversion\r\n  rownames(unordered_expression_data_1) <- unordered_expression_data_1$gene_name\r\n  unordered_expression_data_1$gene_name <- NULL\r\n  \r\n  # Convert to matrix of numeric values\r\n  unordered_expression_data_1 <- as.matrix(sapply(unordered_expression_data_1, as.numeric))\r\n  \r\n  \r\n  num_genes <- nrow(unordered_expression_data_1)\r\n  num_patients <- ncol(unordered_expression_data_1) \r\n  \r\n  if (num_genes < 1) {\r\n    return (c(1, \"High Expressing\", 0))\r\n  }\r\n  \r\n  \r\n  unordered_expression_data_1 <- t(apply(unordered_expression_data_1, 1, function(x) rank(-x, ties.method = \"first\")))\r\n  \r\n  # adding the mean rank across all rows \r\n  \r\n  unordered_expression_data_1 <- as.data.frame(unordered_expression_data_1)\r\n  \r\n  unordered_expression_data_1[] <- lapply(unordered_expression_data_1, as.numeric)\r\n  \r\n  mean_rank <- colMeans(unordered_expression_data_1)\r\n  \r\n  upper_gene_1 <- names(mean_rank[mean_rank <= quantile(mean_rank, 0.25)])\r\n  \r\n  quartile_gene_1 <- cancer_data_prime[ , upper_gene_1, drop = FALSE]\r\n  \r\n  # ---- now subsetting based on the second gene (ligand)\r\n  \r\n  gene_list2 <- intersect(gene_list2, gene_metadata$gene_name)\r\n  \r\n  if(length(gene_list2) == 0) {\r\n    print(\"ligand doesn't exist\")\r\n    result_vector <- c(1, \"High Expressing\", 0)\r\n    return (result_vector)\r\n  }\r\n  \r\n  desired_geneIDs <- gene_metadata[gene_metadata$gene_name %in% gene_list2, ]\r\n  \r\n  # check\r\n  if (nrow(desired_geneIDs) == 0) {\r\n    print(\"No matching gene\")\r\n    result_vector <- c(1, \"High Expressing\", 0)\r\n    return (result_vector)\r\n  }\r\n  \r\n  quartile_gene_1 <- merge(quartile_gene_1, desired_geneIDs, by = 'row.names')\r\n  \r\n  #view(quartile_gene_1)\r\n  \r\n  quartile_gene_1 <- quartile_gene_1 %>% relocate(gene_name)\r\n  columns <- c('Row.names', 'gene_id', 'gene_type',\r\n               'havana_gene', 'phase', 'level', 'source', 'hgnc_id', 'score', 'type')\r\n  \r\n  # this is the final count data\r\n  quartile_unordered_expression_data_1 <- quartile_gene_1[, !(names(quartile_gene_1) %in% columns)]\r\n  \r\n  quartile_unordered_expression_data_1 <- as.data.frame(quartile_unordered_expression_data_1)\r\n  \r\n  quartile_unordered_expression_data_1[] <- lapply(quartile_unordered_expression_data_1, as.numeric)\r\n  \r\n  quartile_unordered_expression_data_1 <- as.matrix(quartile_unordered_expression_data_1)\r\n  \r\n  quartile_unordered_expression_data_1 <-quartile_unordered_expression_data_1[, -1, drop = FALSE]\r\n  \r\n  \r\n  num_genes <- nrow(quartile_unordered_expression_data_1)\r\n  num_patients <- ncol(quartile_unordered_expression_data_1)\r\n  \r\n  if(num_genes == 0 || num_patients == 0) {\r\n    print(\"can't subset for ligand\")\r\n    result_vector <- c(1, \"High Expressing\", 0)\r\n    return (result_vector)\r\n  }\r\n  \r\n  \r\n  quartile_unordered_expression_data_1 <- t(apply(quartile_unordered_expression_data_1, 1, function(x) rank(-x, ties.method = \"first\")))\r\n  \r\n  #view(quartile_unordered_expression_data_1)\r\n  \r\n  # adding the mean rank across all rows\r\n  \r\n  quartile_unordered_expression_data_1 <- as.data.frame(quartile_unordered_expression_data_1)\r\n  \r\n  quartile_unordered_expression_data_1[] <- lapply(quartile_unordered_expression_data_1, as.numeric)\r\n  \r\n  mean_rank <- colMeans(quartile_unordered_expression_data_1)\r\n  \r\n  upper_gene_2 <- names(mean_rank[mean_rank <= quantile(mean_rank, 0.25)])\r\n  lower_gene_2 <- names(mean_rank[mean_rank >= quantile(mean_rank, 0.75)])\r\n  \r\n  \r\n  # adding the sets of patients together along with stratum\r\n  gene2_combined_patients <- data.frame(\r\n    patients = c(upper_gene_2, lower_gene_2),\r\n    stratum = c(rep(\"HIGH\", length(upper_gene_2)), rep(\"LOW\", length(lower_gene_2)))\r\n  )\r\n  \r\n  #gene2_combined_patients <- rbind(gene2_lower_quartile, gene2_upper_quartile)\r\n  \r\n  gene2_combined_patients$patients <- gsub(\"\\\\.\", \"-\", gene2_combined_patients$patients)\r\n  \r\n  # adding the clinical data\r\n  gene2_combined_patients <- merge(gene2_combined_patients, clinical_data,\r\n                                   by.x = 'patients', by.y = 'cases')\r\n  \r\n  # adding a column for whether the patient is dead or not\r\n  gene2_combined_patients$deceased <- ifelse(is.na(gene2_combined_patients$days_to_death), FALSE, TRUE)\r\n  \r\n  \r\n  #removing patients who don't have a value for days_to_death or days_to_last_follow_up\r\n  gene2_combined_patients <- subset(gene2_combined_patients, !(is.na(days_to_death) & is.na(days_to_last_follow_up)\r\n                                                               & is.na(deceased)))\r\n  \r\n  # adding column that has days_to_death or days_to_last_follow_up\r\n  gene2_combined_patients$overall_survival <- ifelse(gene2_combined_patients$deceased == TRUE,\r\n                                                     as.numeric(gene2_combined_patients$days_to_death),\r\n                                                     as.numeric(gene2_combined_patients$days_to_last_follow_up))\r\n  \r\n  \r\n  \r\n  fit <- survfit(Surv(overall_survival, deceased) ~ stratum, data = gene2_combined_patients)\r\n  \r\n  surv_diff <- survdiff(Surv(overall_survival, deceased) ~ stratum, data = gene2_combined_patients)\r\n  pval <- 1 - pchisq(surv_diff$chisq, length(surv_diff$n) - 1)\r\n  \r\n  # rmean_vals <- summary(fit, rmean = \"common\")$table\r\n  # survival_dif <- as.numeric(rmean_vals[1, \"rmean\"] - rmean_vals[2, \"rmean\"])\r\n  # surviving_group <- \"High\"\r\n\r\n  strata_vec <- rep(names(fit$strata), fit$strata)\r\n  surv_df <- data.frame(\r\n    time = fit$time,\r\n    surv = fit$surv,\r\n    strata = strata_vec\r\n  )\r\n  \r\n  title <- paste(gene_module1, gene_module2, sep = \" & \")\r\n  title <- paste0(title, \": High/High vs High/Low\")\r\n  title <- paste(title, cancer, sep = \" in \")\r\n\r\n  surv_plot <- ggplot(surv_df, aes(x = time, y = surv, color = strata)) +\r\n    geom_step(size = 1) +\r\n    theme_minimal() +\r\n    scale_color_manual(values = c(\"red\", \"blue\")) +\r\n    labs(\r\n      title = title,\r\n      x = \"Time (Days)\",\r\n      y = \"Survival Probability\",\r\n      color = \"Group\"\r\n    ) +\r\n    annotate(\"text\", x = 0, y = 0.02, label = paste(\"n =\", length(upper_gene_2)),\r\n             hjust = 0, vjust = 0, size = 4) +\r\n    annotate(\"text\", x = 0, y = 0.1, label = paste(\"p =\", round(pval,4)), hjust = 0, vjust = 0, size = 4)\r\n  \r\n  return(surv_plot)\r\n  \r\n}\r\n\r\n# plotLineageLigand(cancer = \"TCGA-LIHC\", gene_module1 = \"malig hep\", \r\n#   gene_list1 =  c(\"CCL5\", \"CCL4\")\r\n#   , \r\n#   gene_module2 = \"malig epi\",\r\n#   gene_list2 = c(\"CD40\")\r\n#   , \r\n#   cancer_data_prime = LIHC_cancer_data_prime, clinical_data = LIHC_clinical_data, \r\n#   gene_metadata = LIHC_gene_metadata, col_data = LIHC_col_data)\r\n","type":"text"},{"name":"webapp.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
